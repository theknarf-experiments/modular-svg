#!/usr/bin/env bun
import { readFileSync, writeFileSync } from "node:fs";
import { fileURLToPath } from "node:url";
import { dirname, join } from "node:path";
import {
       buildSceneFromJson,
       layoutToSvg,
       solveLayout,
       validate,
} from "../src/index.ts";


async function readInput(arg) {
        if (arg && arg !== "-") {
                return readFileSync(arg, "utf8");
        }
        if (process.stdin.isTTY) {
                console.error("Usage: modular-svg <scene.json|-> [output.svg|-]");
                process.exit(1);
        }
        let data = "";
        for await (const chunk of process.stdin) data += chunk;
        return data;
}

try {
        let margin = 3;
        const args = process.argv.slice(2);
        const files = [];
        for (let i = 0; i < args.length; i++) {
                const arg = args[i];
                if (arg === "-m" || arg === "--margin") {
                        const val = args[i + 1];
                        margin = val ? Number(val) : margin;
                        i++;
                        continue;
                }
                const match = /^--margin=(.*)$/.exec(arg);
                if (match) {
                        margin = Number(match[1]);
                        continue;
                }
                files.push(arg);
        }
        const inputArg = files[0];
        const raw = await readInput(inputArg);
        const data = JSON.parse(raw);
        try {
                validate(data);
        } catch (err) {
                console.error("Invalid scene:", err);
                process.exit(1);
        }
        const scene = buildSceneFromJson(data);
        const layout = solveLayout(scene);
        const svg = layoutToSvg(layout, scene.nodes, margin);
        const out = files[1];
        if (out && out !== "-") {
                writeFileSync(out, svg);
        } else {
                process.stdout.write(svg);
        }
} catch (err) {
        console.error(err);
        process.exit(1);
}
