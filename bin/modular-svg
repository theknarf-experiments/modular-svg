#!/usr/bin/env node
import { readFileSync, writeFileSync } from 'node:fs';
import Ajv from 'ajv';
import schema from '../scene.schema.json' assert { type: 'json' };
import { buildSceneFromJson, solveLayout } from '../src/index.js';

const input = process.argv[2];
if (!input) {
  console.error('Usage: modular-svg <scene.json> [output.svg]');
  process.exit(1);
}
const data = JSON.parse(readFileSync(input, 'utf8'));
const ajv = new Ajv();
const validate = ajv.compile(schema);
if (!validate(data)) {
  console.error('Invalid scene:', validate.errors);
  process.exit(1);
}
const scene = buildSceneFromJson(data);
const layout = solveLayout(scene);

const svg = render(layout);
writeFileSync(process.argv[3] || 'out.svg', svg);

function render(layout) {
  let body = '';
  for (const [id, box] of Object.entries(layout)) {
    body += `<rect id="${id}" x="${box.x}" y="${box.y}" width="${box.width}" height="${box.height}" fill="none" stroke="black"/>\n`;
  }
  const w = Math.max(...Object.values(layout).map(b => b.x + b.width));
  const h = Math.max(...Object.values(layout).map(b => b.y + b.height));
  return `<svg xmlns="http://www.w3.org/2000/svg" width="${w}" height="${h}">\n${body}</svg>`;
}
